var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Ledger API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
export var getGetTransactionsResponseMock = function () { return (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, function (_, i) { return i + 1; }).map(function () { return ({ id: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]), date: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), description: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]), debitAccount: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]), creditAccount: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]), amount: faker.helpers.arrayElement([faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }), undefined]) }); })); };
export var getPostTransactionsResponseMock = function (overrideResponse) {
    if (overrideResponse === void 0) { overrideResponse = {}; }
    return (__assign({ id: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]), date: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), description: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]), debitAccount: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]), creditAccount: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]), amount: faker.helpers.arrayElement([faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }), undefined]) }, overrideResponse));
};
export var getGetTransactionsMockHandler = function (overrideResponse) {
    return http.get('*/transactions', function (info) { return __awaiter(void 0, void 0, void 0, function () {
        var _a, _b, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0: return [4 /*yield*/, delay(1000)];
                case 1:
                    _f.sent();
                    _a = HttpResponse.bind;
                    _c = (_b = JSON).stringify;
                    if (!(overrideResponse !== undefined)) return [3 /*break*/, 5];
                    if (!(typeof overrideResponse === "function")) return [3 /*break*/, 3];
                    return [4 /*yield*/, overrideResponse(info)];
                case 2:
                    _e = _f.sent();
                    return [3 /*break*/, 4];
                case 3:
                    _e = overrideResponse;
                    _f.label = 4;
                case 4:
                    _d = (_e);
                    return [3 /*break*/, 6];
                case 5:
                    _d = getGetTransactionsResponseMock();
                    _f.label = 6;
                case 6: return [2 /*return*/, new (_a.apply(HttpResponse, [void 0, _c.apply(_b, [_d]),
                        { status: 200,
                            headers: { 'Content-Type': 'application/json' }
                        }]))()];
            }
        });
    }); });
};
export var getPostTransactionsMockHandler = function (overrideResponse) {
    return http.post('*/transactions', function (info) { return __awaiter(void 0, void 0, void 0, function () {
        var _a, _b, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0: return [4 /*yield*/, delay(1000)];
                case 1:
                    _f.sent();
                    _a = HttpResponse.bind;
                    _c = (_b = JSON).stringify;
                    if (!(overrideResponse !== undefined)) return [3 /*break*/, 5];
                    if (!(typeof overrideResponse === "function")) return [3 /*break*/, 3];
                    return [4 /*yield*/, overrideResponse(info)];
                case 2:
                    _e = _f.sent();
                    return [3 /*break*/, 4];
                case 3:
                    _e = overrideResponse;
                    _f.label = 4;
                case 4:
                    _d = (_e);
                    return [3 /*break*/, 6];
                case 5:
                    _d = getPostTransactionsResponseMock();
                    _f.label = 6;
                case 6: return [2 /*return*/, new (_a.apply(HttpResponse, [void 0, _c.apply(_b, [_d]),
                        { status: 201,
                            headers: { 'Content-Type': 'application/json' }
                        }]))()];
            }
        });
    }); });
};
export var getLedgerAPIMock = function () { return [
    getGetTransactionsMockHandler(),
    getPostTransactionsMockHandler()
]; };
