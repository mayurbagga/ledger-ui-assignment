var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Ledger API
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import useSWRMutation from 'swr/mutation';
import { customInstance } from '../mutator/custom-instance';
/**
 * @summary Get Transactions
 */
export var getTransactions = function (options) {
    return customInstance({ url: "/transactions", method: 'GET' }, options);
};
export var getGetTransactionsKey = function () { return ["/transactions"]; };
/**
 * @summary Get Transactions
 */
export var useGetTransactions = function (options) {
    var _a;
    var _b = options !== null && options !== void 0 ? options : {}, swrOptions = _b.swr, requestOptions = _b.request;
    var isEnabled = (swrOptions === null || swrOptions === void 0 ? void 0 : swrOptions.enabled) !== false;
    var swrKey = (_a = swrOptions === null || swrOptions === void 0 ? void 0 : swrOptions.swrKey) !== null && _a !== void 0 ? _a : (function () { return isEnabled ? getGetTransactionsKey() : null; });
    var swrFn = function () { return getTransactions(requestOptions); };
    var query = useSwr(swrKey, swrFn, swrOptions);
    return __assign({ swrKey: swrKey }, query);
};
/**
 * @summary Create Transaction
 */
export var postTransactions = function (newTransaction, options) {
    return customInstance({ url: "/transactions", method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: newTransaction }, options);
};
export var getPostTransactionsMutationFetcher = function (options) {
    return function (_, _a) {
        var arg = _a.arg;
        return postTransactions(arg, options);
    };
};
export var getPostTransactionsMutationKey = function () { return ["/transactions"]; };
/**
 * @summary Create Transaction
 */
export var usePostTransactions = function (options) {
    var _a;
    var _b = options !== null && options !== void 0 ? options : {}, swrOptions = _b.swr, requestOptions = _b.request;
    var swrKey = (_a = swrOptions === null || swrOptions === void 0 ? void 0 : swrOptions.swrKey) !== null && _a !== void 0 ? _a : getPostTransactionsMutationKey();
    var swrFn = getPostTransactionsMutationFetcher(requestOptions);
    var query = useSWRMutation(swrKey, swrFn, swrOptions);
    return __assign({ swrKey: swrKey }, query);
};
