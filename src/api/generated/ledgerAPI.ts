/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Ledger API
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  NewTransaction,
  Transaction
} from './model';

import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * @summary Get Transactions
 */
export const getTransactions = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Transaction[]>(
    {url: `/transactions`, method: 'GET'
    },
    options);
  }



export const getGetTransactionsKey = () => [`/transactions`] as const;

export type GetTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactions>>>
export type GetTransactionsQueryError = ErrorType<unknown>

/**
 * @summary Get Transactions
 */
export const useGetTransactions = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTransactions>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTransactionsKey() : null);
  const swrFn = () => getTransactions(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Create Transaction
 */
export const postTransactions = (
    newTransaction: NewTransaction,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Transaction>(
    {url: `/transactions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: newTransaction
    },
    options);
  }



export const getPostTransactionsMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: NewTransaction }): Promise<Transaction> => {
    return postTransactions(arg, options);
  }
}
export const getPostTransactionsMutationKey = () => [`/transactions`] as const;

export type PostTransactionsMutationResult = NonNullable<Awaited<ReturnType<typeof postTransactions>>>
export type PostTransactionsMutationError = ErrorType<unknown>

/**
 * @summary Create Transaction
 */
export const usePostTransactions = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postTransactions>>, TError, Key, NewTransaction, Awaited<ReturnType<typeof postTransactions>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostTransactionsMutationKey();
  const swrFn = getPostTransactionsMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete Transaction
 */
export const deleteTransactionsId = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<void>(
    {url: `/transactions/${id}`, method: 'DELETE'
    },
    options);
  }



export const getDeleteTransactionsIdMutationFetcher = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteTransactionsId(id, options);
  }
}
export const getDeleteTransactionsIdMutationKey = (id: string,) => [`/transactions/${id}`] as const;

export type DeleteTransactionsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTransactionsId>>>
export type DeleteTransactionsIdMutationError = ErrorType<void>

/**
 * @summary Delete Transaction
 */
export const useDeleteTransactionsId = <TError = ErrorType<void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteTransactionsId>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteTransactionsId>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteTransactionsIdMutationKey(id);
  const swrFn = getDeleteTransactionsIdMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

